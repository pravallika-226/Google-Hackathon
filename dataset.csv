# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score

# Step 1: Load the dataset
# Replace 'dataset.csv' with your actual dataset file
# Columns: Fan-In, Fan-Out, Signal-Type, Logic-Gates, Clock-Frequency, Path-Length, Combinational-Depth
data = pd.read_csv('dataset.csv')

# Step 2: Feature Engineering
# Define features (X) and target (y)
X = data[['Fan-In', 'Fan-Out', 'Signal-Type', 'Logic-Gates', 'Clock-Frequency', 'Path-Length']]
y = data['Combinational-Depth']

# Step 3: Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Train the Random Forest Regressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 5: Evaluate the model
y_pred = model.predict(X_test)

# Calculate evaluation metrics
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error: {mae}")
print(f"R^2 Score: {r2}")

# Step 6: Save the model for future use
import joblib
joblib.dump(model, 'combinational_depth_predictor.pkl')

# Step 7: Make predictions on new data
# Example: Predict combinational depth for a new signal
new_signal = pd.DataFrame({
    'Fan-In': [5],
    'Fan-Out': [3],
    'Signal-Type': [1],  # 1 for critical, 0 for non-critical
    'Logic-Gates': [10],
    'Clock-Frequency': [100],  # in MHz
    'Path-Length': [8]
})

predicted_depth = model.predict(new_signal)
print(f"Predicted Combinational Depth: {predicted_depth[0]}")
